#!/usr/bin/python

from __future__ import print_function
import sys
import re
import csv
import logging
import time
import configparser
import nmap
import pysnow
# stworzenie polaczenia
LOG_FILE_PATH = '/var/log/nmap_vuln_sn.log'
logging.basicConfig(filename=LOG_FILE_PATH, format='%(asctime)s %(message)s', level=logging.INFO)
HALT = False

class ScanVulnServiceNow:
  def __init__(self, infile='in-subnets_list_csv', outfile='out-file',in_vuln_list_csv='in-vuln_list_csv'):
        halt = False
        self.i = infile
        self.l = open(in_vuln_list_csv, "r")
        self.o = open(outfile, "w")
        print('Input file:', self.i)
        print('Input vfile:',self.l)
        print('Output file:', self.o)

        CONFIG = configparser.ConfigParser()
        #path to  config
        try:
            print("config \\n")
            CONFIG.read('/home/kali/Desktop/PenTestingPro/AutomationPenTest/root/script/Auto.ini')
            print(str(CONFIG.sections()))
        except Exception as conf:
            print("error loading config : "+conf)

        print(CONFIG['DEFAULT'])
        SN_USERNAME = CONFIG['DEFAULT']['SNuser']
        print(SN_USERNAME)
        SN_PASSWORD = CONFIG['DEFAULT']['SNpass']
        SN_INSTANCES = CONFIG['DEFAULT']['SNinstance']

        def servicenow(computer_hostname, computer_ip, computer_domain, computer_workgroup, computer_os):
            '''
            Function is checking if there is already ticket for device if now create new one. If ticket is resolve it will reopen it if device is still vulnerable
            '''
            pysnow_c = pysnow.Client(instance=SN_INSTANCES, user=SN_USERNAME, password=SN_PASSWORD)
            # First checking if there is already ticket for that hostname
            incident = pysnow_c.resource(api_path='/table/incident')
            query_pysnow = 'problem_id='+CONFIG['nmap']['problem_id']+'^short_descriptionLIKE '+computer_hostname+' ^ORdescriptionLIKE '+computer_hostname+' '
            response = incident.get(query=query_pysnow)
            short_describtion = "Vulnerability  for WannaCry  for IP: "+computer_ip+" , Computer Name: "+computer_hostname +" , Domain or workgoup: "+computer_domain+computer_workgroup+" , OS :"+computer_os
            describtion = "Computer is vulnerable. "
            new_record = {
                'short_description': short_describtion,
                'description': describtion,
                'assignment_group':CONFIG['nmap']['assignment_group'],
                'caller_id': CONFIG['nmap']['caller_id'],
                'category':  CONFIG['nmap']['category'],
                'priority':'3 - Moderate',
                'problem_id': CONFIG['nmap']['problem_nb']}
            flag_closed = False
            flag_reopen = False
            flag_active = False
            # Create new one or reopen old one
            if response.all():
                for respons in response.all():
                    if respons['state'] == "6":
                        flag_reopen = True
                        reopen_ticket = respons['number']
                    elif respons['state'] == "7":
                        flag_closed = True
                    else:
                        flag_active = True
                        ticket_number = respons['number']
                        print(respons['state']+" "+respons['number'])
                if not flag_active and flag_reopen:

                    pysnow_query = pysnow_c.query(table='incident', query={'number': reopen_ticket})
                    ticket_number = reopen_ticket
                    result = pysnow_query.update({'work_notes': 'Host still vulnerable please patch again and clean', 'close_code': '', 'state': '2'})
                    print("Ticket "+result['number']+" state was successfully changed to "+result['state'])


                elif not flag_active and flag_closed:
                    result = incident.create(payload=new_record)
                    print("Ticket already closed new ticket createt "+result['number'])

                    ticket_number = result['number']


            else:
                result = incident.create(payload=new_record)
                print("New ticket  createt "+result['number'])
                ticket_number = result['number']
            return ticket_number


        GLOBAL_COUNTER_RESCAN = 0
        #Port can change


        class SMBHost:
            '''
            Class to contain parsered information from nmap smb-os-discovery script
            '''
            def __init__(self, data):
                self.local_ip = data
                self.computer_os = ""
                self.computer_name = ""
                self.computer_domain = ""
                self.workgroup_host = ""
                self.os_cpe = ""
                self.smb_dialects = ""
                self.smb_1 = ""
            def add_os(self, data):
                '''
                Contain information about device OS
                '''
                self.computer_os = data
            def add_computer_name(self, data):
                '''
                Contain information about device name
                '''
                self.computer_name = data
            def add_domain(self, data):
                '''
                Contain information about device AD domain
                '''
                self.computer_domain = data
            def add_workgroup(self, data):
                '''
                Contain information about device Workgroup
                '''
                self.workgroup_host = data
            def add_cpe(self, data):
                '''
                Contain information about device OS CPE
                '''
                self.os_cpe = data
            def add_dialects(self, data):
                '''
                Contain information about device SMB Dialects
                Not used in script, for future use
                '''
                self.smb_dialects = data
            def add_smbv1(self, data):
                '''
                Contain information about if device use  SMBv1
                Not used in script, for future use
                '''
                self.smb_1 = data

        def smb_info_parser(host_ip, nm2):
            '''
            Function is parsing interesting data like OS , Domain ...
            from output of smb-os-discovery nmap script to SMBHost class
            '''
            output_list = []
            local_scan_results = nm2._scan_result['scan'][host_ip]['hostscript']
            network_class = SMBHost(host_ip)
            output_list.append(network_class)

            for local_output in local_scan_results:
                if local_output['id'] == "smb-os-discovery":
                    regex = re.compile('(?<=OS:).*')
                    computer_os = regex.search(local_output['output'])
                    if computer_os:
                        computer_os = computer_os.group().strip()
                        network_class.add_os(computer_os)
                    regex = re.compile('(?<=Computer name:).*')
                    computer_name = regex.search(local_output['output'])
                    if computer_name:
                        computer_name = computer_name.group().strip()
                        network_class.add_computer_name(computer_name)
                    regex = re.compile('(?<=Workgroup:).*')
                    workgroup_host = regex.search(local_output['output'])
                    if workgroup_host:
                        workgroup_host = workgroup_host.group().strip()
                        network_class.add_workgroup(workgroup_host)
                    regex = re.compile('(?<=Domain name:).*')
                    domain_name = regex.search(local_output['output'])
                    if domain_name:
                        domain_name = domain_name.group().strip()
                        network_class.add_domain(domain_name)
                    regex = re.compile('(?<=OS CPE:).*')
                    os_cpe = regex.search(local_output['output'])
                    if os_cpe:
                        os_cpe = os_cpe.group().strip()
                        network_class.add_cpe(os_cpe)
                elif local_output['id'] == "smb-protocols":
                    regex = re.compile('\d\.\d\d')
                    dialects = regex.findall(local_output['output'])
                    if dialects:
                        dialects = '/'.join(dialects)
                        network_class.add_dialects(dialects)
                    if "SMBv1" in local_output['output']:
                        network_class.add_smbv1("Enabled")

            return output_list


        def nmap_scan(ip_to_check, vuln_name):
            '''
            scaning nmap to gather information about hosts
            '''
            nm2 = nmap.PortScanner()
            print("Start SMB scan".center(190, "-"))
            nm2.scan(ip_to_check, "445,139", "--script smb-os-discovery.nse")
            test_scan_finished = nm2.all_hosts()
            test_scan_finished_len = len(test_scan_finished)
            # Check if the host has not been  switched off in the middle of scan
            if test_scan_finished_len == 0:
                to_file = ip_to_check+","+str(vuln_name)+",Scan_error \n"
                self.o.write(to_file)
                print(to_file)
            else:
                output_scan = nm2._scan_result['scan'][ip_to_check]
                output_scan = str(output_scan)
                #check if script smb discovery script  list was able to got any info
                scan_results_test = "hostscript"
                if scan_results_test in output_scan:
                    local_output = smb_info_parser(ip_to_check, nm2)
                    for lists in local_output:
                        host_list = lists.local_ip+","
                        host_list = host_list+str(vuln_name)+","
                        host_list = host_list+lists.computer_name+","
                        host_list = host_list+lists.computer_os+","
                        host_list = host_list+lists.computer_domain+","
                        host_list = host_list+lists.workgroup_host+","
                        host_list = host_list+lists.os_cpe+"\n"
                        print(host_list)
                        self.o.write(host_list)
                        ticket_number = servicenow(lists.computer_name, lists.local_ip, lists.computer_domain, lists.workgroup_host, lists.computer_os)
                        logging.info("Vulnerable host: "+str(lists.local_ip)+" "+lists.computer_name+" "+str(ticket_number))
                else:
                    print(ip_to_check+","+str(vuln_name)+",no_smb_info")
                    to_file = ip_to_check+","+str(vuln_name)+",no_smb_info \n"
                    self.o.write(to_file)
                    ticket_number = servicenow(ip_to_check, ip_to_check, "", "", "")
                    logging.info("Vulnerable host: "+ip_to_check+" "+ip_to_check+" "+str(ticket_number))
            print("End SMB scan ".center(190, "-"))

        def nmap_sync_scan(local_line, local_row):
            '''
            Fast syn scan to check if provided port is open, if it is open start msf vuln scan
            '''
            global GLOBAL_COUNTER_RESCAN
            #sync scan
            port_filtered = ""
            port_str = ""
            local_nm = nmap.PortScanner()
            #TCP rescan
            local_nm3 = nmap.PortScanner()
            #script vuln check
            local_nm2 = nmap.PortScanner()
            print("Start scanning".center(190, "="))
            print('{:^190}'.format(local_line))
            print("==============".center(190, "="))
            if ";" in local_row[0]:
                local_row[0] = local_row[0].replace(";", ",")
            #Starting scan for 445 and 139 smb ports
            local_nm.scan(local_line, local_row[0], "-sS")
            for host in local_nm.all_hosts():
                host_str = str(host)
                host_status = local_nm._scan_result['scan'][host_str]['status']['state']
                host_tcp = local_nm._scan_result['scan'][host]['tcp']
                for port_nr in host_tcp:
                    port_state = local_nm._scan_result['scan'][host]['tcp'][port_nr]['state']
                    if port_state == "open":
                        port_str = str(port_nr)
                    if port_state == "filtered":
                        port_filtered = str(port_nr)
            # when scanning large complex subnets, some ack can miss and it is marking open ports us filtered, need to scan againg it per ip is working fine. In normal enviroment it can be removed
                if host_status == "up" and port_filtered != "" and port_str == "":
                    for port_nr in host_tcp:
                        port_nr_str = str(port_nr)
                        port_state = local_nm._scan_result['scan'][host]['tcp'][port_nr]['state']
                        if port_state == "filtered":
                            local_nm3.scan(host, port_nr_str, "-sS")
                            test_scan_finished = local_nm3.all_hosts()
                            test_scan_finished_len = len(test_scan_finished)
                            # Check if the server has not been switched off in the middle of scan
                            if test_scan_finished_len == 0:
                                logging.info(host+",Scan_error,"+port_nr_str)
                            else:
                                r4_rescan = local_nm3._scan_result['scan'][host]['tcp']

                                if port_nr_str in str(r4_rescan):
                                    port_state = local_nm3._scan_result['scan'][host]['tcp'][port_nr]['state']
                                    if port_state == "open":
                                        port_str = str(port_nr)
                                        print("rescanned "+str(host) +" "+port_str)
                                        GLOBAL_COUNTER_RESCAN = GLOBAL_COUNTER_RESCAN+1 
                #if ports are open start smb discovery  scripit
                print(host+","+host_status+","+port_state+",")
                if host_status == "up" and port_state == "open":
                    local_nm2.scan(host, port_str, "--script "+local_row[1])
                    test_scan_finished = local_nm2.all_hosts()
                    test_scan_finished_len = len(test_scan_finished)
                    if test_scan_finished_len == 0:
                        logging.info(host+",Scan_error,"+port_str)
                    else:
                        output_scan = local_nm2._scan_result['scan'][host]
                        output_scan = str(output_scan)
                #check if script smb discovery script  list was able to got any info
                        scan_results_test = "VULNERABLE"
                        if scan_results_test in output_scan:
                            logging.info(" Vulnerable host  : %s", host_str)
                            try:
                                nmap_scan(host, local_row[2])
                            except Exception as nmap_error:
                                logging.error("error  nmap scan: %s  %s ", str(nmap_error), host_str)
                                print('\x1b[0;31;40m'+"ERROR NMAP SCAN : "+str(nmap_error)+'\x1b[0m')
        logging.info("Scan started")
        HEAD_LINE = "IP,vulnerable service,computer_name,OS,Domain,workgroup_host,CPE\n"
        self.o.write(HEAD_LINE)
        LINES = csv.reader(self.l, delimiter=',', quotechar='|')
        for row in LINES:
            print("=".center(190, "="))
            print(("Start scan using nmap  module "+row[1]).center(190, "="))
            FILE_SUBNETS = open(self.i)
            with FILE_SUBNETS as f:
                for line in f:
                    nmap_sync_scan(line, row)
        print("Successfully rescans:")
        print(GLOBAL_COUNTER_RESCAN)
        self.o.close()
        FILE_SUBNETS.close()
        self.l.close()
        logging.info("Scan ended")
